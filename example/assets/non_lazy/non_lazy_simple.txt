// ignore_for_file: implementation_imports
// ignore_for_file: prefer_const_constructors
// ignore_for_file: always_specify_types
// ignore_for_file: directives_ordering
import 'package:example/non_lazy/non_lazy_simple.dart' as _i1;
import 'package:jugger/jugger.dart' as _i2;

class JuggerAppComponent implements _i1.AppComponent {
  JuggerAppComponent.create() {
    _init();
  }

  late _i2.IProvider<_i1.LazyRepository> _lazyRepositoryProvider;

  late _i2.IProvider<_i1.NonLazyRepository> _nonLazyRepositoryProvider;

  @override
  _i1.LazyRepository getLazyRepository() {
    return _lazyRepositoryProvider.get();
  }

  @override
  _i1.NonLazyRepository getNonLazyRepository() {
    return _nonLazyRepositoryProvider.get();
  }

  void _init() {
    _initProvides();
    _initNonLazy();
  }

  void _initProvides() {
    _lazyRepositoryProvider = _i2.SingletonProvider<_i1.LazyRepository>(() {
      return _i1.AppModule.provideLazyRepository();
    });
    _nonLazyRepositoryProvider =
        _i2.SingletonProvider<_i1.NonLazyRepository>(() {
      return _i1.AppModule.provideNonLazyRepository();
    });
  }

  void _initNonLazy() {
    _nonLazyRepositoryProvider.get();
  }

  @override
  void dispose() {}
}
