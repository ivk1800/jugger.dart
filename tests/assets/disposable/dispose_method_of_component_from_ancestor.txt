// ignore_for_file: implementation_imports
// ignore_for_file: prefer_const_constructors
// ignore_for_file: always_specify_types
// ignore_for_file: directives_ordering
// ignore_for_file: non_constant_identifier_names
import 'package:tests/disposable/dispose_method_of_component_from_ancestor.dart'
    as _i1;
import 'dart:async' as _i2;

class JuggerAppComponentBuilder implements _i1.AppComponentBuilder {
  _i1.MyClass1? _myClass1;

  @override
  _i1.AppComponentBuilder setMyClass1(_i1.MyClass1 c) {
    _myClass1 = c;
    return this;
  }

  @override
  _i1.AppComponent build() {
    assert(_myClass1 != null);
    return JuggerAppComponent._create(_myClass1!);
  }
}

class JuggerAppComponent implements _i1.AppComponent {
  JuggerAppComponent._create(this._myClass1) {
    _registerDisposableArguments();
  }

  final _i1.MyClass1 _myClass1;

  final _DisposableManager _disposableManager =
      _DisposableManager('AppComponent');

  @override
  _i1.MyClass1 getMyClass1() {
    _disposableManager.checkDisposed();
    return _myClass1;
  }

  void _registerDisposableArguments() =>
      _disposableManager..register(_myClass1.dispose);
  @override
  Future<void> dispose() => _disposableManager.dispose();
}

class _DisposableManager {
  _DisposableManager(this._componentName);

  bool _disposed = false;

  final String _componentName;

  List<_i2.FutureOr<dynamic> Function()> _disposables =
      <_i2.FutureOr<dynamic> Function()>[];

  void register(_i2.FutureOr<dynamic> Function() disposable) {
    assert(!_disposed);
    _disposables.add(disposable);
  }

  void checkDisposed() {
    if (_disposed) {
      throw StateError('${_componentName} accessed after dispose.');
    }
  }

  Future<void> dispose() async {
    if (_disposed) {
      return;
    }
    _disposed = true;
    for (_i2.FutureOr<dynamic> Function() value in _disposables.reversed) {
      await value.call();
    }
  }
}
