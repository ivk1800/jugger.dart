// ignore_for_file: implementation_imports
// ignore_for_file: prefer_const_constructors
// ignore_for_file: always_specify_types
// ignore_for_file: directives_ordering
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: type=lint
// ignore_for_file: unused_field
// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:tests/subcomponent/subcomponent_with_builder.dart' as _i1;
import 'package:jugger/jugger.dart' as _i2;

class JuggerAppComponent implements _i1.AppComponent {
  JuggerAppComponent.create();

  late final _i2.IProvider<String> _string0Provider =
      _i2.SingletonProvider<String>(() => _i1.AppModule.provideString());

  _i1.MyComponent createMyComponent(_i1.MyComponentBuilder builder) {
    assert(builder is JuggerSubcomponent$MyComponentBuilder);
    return (builder as JuggerSubcomponent$MyComponentBuilder)
        ._setParent(this)
        .build();
  }
}

class JuggerSubcomponent$MyComponent implements _i1.MyComponent {
  JuggerSubcomponent$MyComponent._create(
    this._parent,
    this._double1,
  );

  final JuggerAppComponent _parent;

  late final _i2.IProvider<int> _int2Provider =
      _i2.Provider<int>(() => _i1.MyModule.provideCount(
            _parent._string0Provider.get(),
            _double1,
          ));

  final double _double1;

  @override
  int get count => _int2Provider.get();
}

class JuggerSubcomponent$MyComponentBuilder implements _i1.MyComponentBuilder {
  JuggerAppComponent? _parent;

  double? _double1;

  _i1.MyComponentBuilder _setParent(JuggerAppComponent parent) {
    _parent = parent;
    return this;
  }

  @override
  _i1.MyComponentBuilder setDouble(double d) {
    _double1 = d;
    return this;
  }

  @override
  _i1.MyComponent build() {
    assert(_double1 != null);
    assert(_parent != null);
    return JuggerSubcomponent$MyComponent._create(
      _parent!,
      _double1!,
    );
  }
}
