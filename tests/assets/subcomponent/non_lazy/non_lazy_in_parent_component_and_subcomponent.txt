// ignore_for_file: implementation_imports
// ignore_for_file: prefer_const_constructors
// ignore_for_file: always_specify_types
// ignore_for_file: directives_ordering
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: type=lint
// ignore_for_file: unused_field
// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:tests/subcomponent/non_lazy/non_lazy_in_parent_component_and_subcomponent.dart'
    as _i1;
import 'package:jugger/jugger.dart' as _i2;

class JuggerMyComponent implements _i1.MyComponent {
  JuggerMyComponent.create() {
    _initNonLazy();
  }

  late final _i2.IProvider<String> _string0Provider =
      _i2.SingletonProvider<String>(
          () => _i1.MyComponentModule.provideString());

  @override
  String getString() => _string0Provider.get();
  _i1.MySubcomponent createMySubcomponent() {
    return JuggerSubcomponent$MySubcomponent.create(this);
  }

  void _initNonLazy() {
    _string0Provider.get();
  }
}

class JuggerSubcomponent$MySubcomponent implements _i1.MySubcomponent {
  JuggerSubcomponent$MySubcomponent.create(this._parent) {
    _initNonLazy();
  }

  final JuggerMyComponent _parent;

  late final _i2.IProvider<int> _int1Provider =
      _i2.SingletonProvider<int>(() => _i1.MySubcomponentModule.provideInt());

  @override
  int getInt() => _int1Provider.get();
  void _initNonLazy() {
    _int1Provider.get();
  }
}
