// ignore_for_file: implementation_imports
// ignore_for_file: prefer_const_constructors
// ignore_for_file: always_specify_types
// ignore_for_file: directives_ordering
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: type=lint
// ignore_for_file: unused_field
// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:tests/subcomponent/subcomponent_scoped_injected_class_dependency_from_parent_in_scoped_subcomponent_as_accessor.dart'
    as _i1;
import 'package:jugger/jugger.dart' as _i2;

class JuggerMyComponent implements _i1.MyComponent {
  JuggerMyComponent.create();

  late final _i2.IProvider<_i1.MyClass> _myClass0Provider =
      _i2.SingletonProvider<_i1.MyClass>(() => const _i1.MyClass());

  @override
  _i1.MyClass getMyClass() => _myClass0Provider.get();
  @override
  _i1.MyClass get myClass => _myClass0Provider.get();
  _i1.MySubcomponent createMySubcomponent() {
    return JuggerSubcomponent$MySubcomponent.create(this);
  }
}

class JuggerSubcomponent$MySubcomponent implements _i1.MySubcomponent {
  JuggerSubcomponent$MySubcomponent.create(this._parent);

  final JuggerMyComponent _parent;

  @override
  _i1.MyClass getMyClass() => _parent._myClass0Provider.get();
  @override
  _i1.MyClass get myClass => _parent._myClass0Provider.get();
}
