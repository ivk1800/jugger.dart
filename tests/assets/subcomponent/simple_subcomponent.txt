// ignore_for_file: implementation_imports
// ignore_for_file: prefer_const_constructors
// ignore_for_file: always_specify_types
// ignore_for_file: directives_ordering
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:tests/subcomponent/simple_subcomponent.dart' as _i1;
import 'package:jugger/jugger.dart' as _i2;

class JuggerMyComponentBuilder implements _i1.MyComponentBuilder {
  _i1.AppComponent? _appComponent;

  @override
  _i1.MyComponentBuilder appComponent(_i1.AppComponent appComponent) {
    _appComponent = appComponent;
    return this;
  }

  @override
  _i1.MyComponent build() {
    assert(_appComponent != null);
    return JuggerMyComponent._create(_appComponent!);
  }
}

class JuggerAppComponent implements _i1.AppComponent {
  JuggerAppComponent.create();

  late final _i2.IProvider<_i1.AppConfig> _appConfigProvider =
      _i2.SingletonProvider<_i1.AppConfig>(
          () => _i1.AppModule.provideAppConfig());

  @override
  _i1.AppConfig get appConfig => _appConfigProvider.get();
}

class JuggerMyComponent implements _i1.MyComponent {
  JuggerMyComponent._create(this._appComponent);

  late final _i2.IProvider<String> _stringProvider = _i2.Provider<String>(
      () => _i1.MyModule.provideHelloString(_appComponent.appConfig));

  final _i1.AppComponent _appComponent;

  @override
  String get helloString => _stringProvider.get();
}
