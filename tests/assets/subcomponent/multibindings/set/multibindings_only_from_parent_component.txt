// ignore_for_file: implementation_imports
// ignore_for_file: prefer_const_constructors
// ignore_for_file: always_specify_types
// ignore_for_file: directives_ordering
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: type=lint
// ignore_for_file: unused_field
// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:tests/subcomponent/multibindings/set/multibindings_only_from_parent_component.dart'
    as _i1;
import 'package:jugger/jugger.dart' as _i2;

class JuggerMyComponent implements _i1.MyComponent {
  JuggerMyComponent.create();

  late final _Set0MyComponent$Provider _set0Provider =
      _Set0MyComponent$Provider();

  @override
  Set<String> get strings => _set0Provider.get();
  _i1.MySubcomponent createMySubcomponent() {
    return JuggerSubcomponent$MySubcomponent.create(this);
  }
}

class JuggerSubcomponent$MySubcomponent implements _i1.MySubcomponent {
  JuggerSubcomponent$MySubcomponent.create(this._parent);

  final JuggerMyComponent _parent;

  late final _Set0MySubcomponent$Provider _set0Provider =
      _Set0MySubcomponent$Provider(this);

  @override
  Set<String> get strings => _set0Provider.get();
}

class _Set0MyComponent$Provider implements _i2.IProvider<Set<String>> {
  late final _i2.IProvider<String> _string1Provider =
      _i2.Provider<String>(() => _i1.MyComponentModule.provideString1());

  late final _i2.IProvider<String> _string2Provider =
      _i2.Provider<String>(() => _i1.MyComponentModule.provideString2());

  @override
  Set<String> get() => Set.unmodifiable(<String>{
        _string1Provider.get(),
        _string2Provider.get(),
      });
}

class _Set0MySubcomponent$Provider implements _i2.IProvider<Set<String>> {
  _Set0MySubcomponent$Provider(this._component);

  late final _i2.IProvider<String> _string1Provider =
      _component._parent._set0Provider._string1Provider;

  late final _i2.IProvider<String> _string2Provider =
      _component._parent._set0Provider._string2Provider;

  final JuggerSubcomponent$MySubcomponent _component;

  @override
  Set<String> get() => Set.unmodifiable(<String>{
        _string1Provider.get(),
        _string2Provider.get(),
      });
}
