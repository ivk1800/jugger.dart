// ignore_for_file: implementation_imports
// ignore_for_file: prefer_const_constructors
// ignore_for_file: always_specify_types
// ignore_for_file: directives_ordering
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: type=lint
// ignore_for_file: unused_field
// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:tests/subcomponent/subcomponents_chain/subcomponents_chain_dependency_from_arguments.dart'
    as _i1;
import 'package:jugger/jugger.dart' as _i2;

class JuggerComponent1 implements _i1.Component1 {
  JuggerComponent1._create(this._fromComponent10);

  final _i1.FromComponent1 _fromComponent10;

  _i1.Component2 createComponent2(_i1.Component2Builder builder) {
    assert(builder is JuggerSubcomponent$Component2Builder);
    return (builder as JuggerSubcomponent$Component2Builder)
        ._setParent(this)
        .build();
  }
}

class JuggerSubcomponent$Component2 implements _i1.Component2 {
  JuggerSubcomponent$Component2._create(
    this._parent,
    this._fromComponent21,
  );

  final JuggerComponent1 _parent;

  final _i1.FromComponent2 _fromComponent21;

  _i1.Component3 createComponent3() {
    return JuggerSubcomponent$Component3.create(this);
  }
}

class JuggerSubcomponent$Component3 implements _i1.Component3 {
  JuggerSubcomponent$Component3.create(this._parent);

  final JuggerSubcomponent$Component2 _parent;

  late final _i2.IProvider<_i1.FromComponent3> _fromComponent32Provider =
      _i2.Provider<_i1.FromComponent3>(() => _i1.Component3Module.provideClass(
            _parent._parent._fromComponent10,
            _parent._fromComponent21,
          ));

  @override
  _i1.FromComponent3 getFromComponent3() => _fromComponent32Provider.get();
}

class JuggerComponent1Builder implements _i1.Component1Builder {
  _i1.FromComponent1? _fromComponent10;

  @override
  _i1.Component1Builder setFromComponent1(_i1.FromComponent1 fromComponent1) {
    _fromComponent10 = fromComponent1;
    return this;
  }

  @override
  _i1.Component1 build() {
    assert(_fromComponent10 != null);
    return JuggerComponent1._create(_fromComponent10!);
  }
}

class JuggerSubcomponent$Component2Builder implements _i1.Component2Builder {
  JuggerComponent1? _parent;

  _i1.FromComponent2? _fromComponent21;

  _i1.Component2Builder _setParent(JuggerComponent1 parent) {
    _parent = parent;
    return this;
  }

  @override
  _i1.Component2Builder setFromComponent2(_i1.FromComponent2 fromComponent1) {
    _fromComponent21 = fromComponent1;
    return this;
  }

  @override
  _i1.Component2 build() {
    assert(_fromComponent21 != null);
    assert(_parent != null);
    return JuggerSubcomponent$Component2._create(
      _parent!,
      _fromComponent21!,
    );
  }
}
